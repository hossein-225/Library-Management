// Code generated by MockGen. DO NOT EDIT.
// Source: .//proto/book_grpc.pb.go

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/hossein-225/Library-Management/book-service/proto"
	grpc "google.golang.org/grpc"
)

// MockBookServiceClient is a mock of BookServiceClient interface.
type MockBookServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceClientMockRecorder
}

// MockBookServiceClientMockRecorder is the mock recorder for MockBookServiceClient.
type MockBookServiceClientMockRecorder struct {
	mock *MockBookServiceClient
}

// NewMockBookServiceClient creates a new mock instance.
func NewMockBookServiceClient(ctrl *gomock.Controller) *MockBookServiceClient {
	mock := &MockBookServiceClient{ctrl: ctrl}
	mock.recorder = &MockBookServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookServiceClient) EXPECT() *MockBookServiceClientMockRecorder {
	return m.recorder
}

// AddBook mocks base method.
func (m *MockBookServiceClient) AddBook(ctx context.Context, in *proto.AddBookRequest, opts ...grpc.CallOption) (*proto.AddBookResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddBook", varargs...)
	ret0, _ := ret[0].(*proto.AddBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBook indicates an expected call of AddBook.
func (mr *MockBookServiceClientMockRecorder) AddBook(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBook", reflect.TypeOf((*MockBookServiceClient)(nil).AddBook), varargs...)
}

// CheckAvailability mocks base method.
func (m *MockBookServiceClient) CheckAvailability(ctx context.Context, in *proto.CheckAvailabilityRequest, opts ...grpc.CallOption) (*proto.CheckAvailabilityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckAvailability", varargs...)
	ret0, _ := ret[0].(*proto.CheckAvailabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAvailability indicates an expected call of CheckAvailability.
func (mr *MockBookServiceClientMockRecorder) CheckAvailability(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAvailability", reflect.TypeOf((*MockBookServiceClient)(nil).CheckAvailability), varargs...)
}

// DeleteBook mocks base method.
func (m *MockBookServiceClient) DeleteBook(ctx context.Context, in *proto.DeleteBookRequest, opts ...grpc.CallOption) (*proto.DeleteBookResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBook", varargs...)
	ret0, _ := ret[0].(*proto.DeleteBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookServiceClientMockRecorder) DeleteBook(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookServiceClient)(nil).DeleteBook), varargs...)
}

// ListBooks mocks base method.
func (m *MockBookServiceClient) ListBooks(ctx context.Context, in *proto.ListBooksRequest, opts ...grpc.CallOption) (*proto.ListBooksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBooks", varargs...)
	ret0, _ := ret[0].(*proto.ListBooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockBookServiceClientMockRecorder) ListBooks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockBookServiceClient)(nil).ListBooks), varargs...)
}

// SearchBooks mocks base method.
func (m *MockBookServiceClient) SearchBooks(ctx context.Context, in *proto.SearchBooksRequest, opts ...grpc.CallOption) (*proto.SearchBooksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchBooks", varargs...)
	ret0, _ := ret[0].(*proto.SearchBooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBooks indicates an expected call of SearchBooks.
func (mr *MockBookServiceClientMockRecorder) SearchBooks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBooks", reflect.TypeOf((*MockBookServiceClient)(nil).SearchBooks), varargs...)
}

// UpdateBook mocks base method.
func (m *MockBookServiceClient) UpdateBook(ctx context.Context, in *proto.UpdateBookRequest, opts ...grpc.CallOption) (*proto.UpdateBookResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBook", varargs...)
	ret0, _ := ret[0].(*proto.UpdateBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookServiceClientMockRecorder) UpdateBook(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookServiceClient)(nil).UpdateBook), varargs...)
}

// UpdateBookStatus mocks base method.
func (m *MockBookServiceClient) UpdateBookStatus(ctx context.Context, in *proto.UpdateBookStatusRequest, opts ...grpc.CallOption) (*proto.UpdateBookStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBookStatus", varargs...)
	ret0, _ := ret[0].(*proto.UpdateBookStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBookStatus indicates an expected call of UpdateBookStatus.
func (mr *MockBookServiceClientMockRecorder) UpdateBookStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookStatus", reflect.TypeOf((*MockBookServiceClient)(nil).UpdateBookStatus), varargs...)
}

// MockBookServiceServer is a mock of BookServiceServer interface.
type MockBookServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceServerMockRecorder
}

// MockBookServiceServerMockRecorder is the mock recorder for MockBookServiceServer.
type MockBookServiceServerMockRecorder struct {
	mock *MockBookServiceServer
}

// NewMockBookServiceServer creates a new mock instance.
func NewMockBookServiceServer(ctrl *gomock.Controller) *MockBookServiceServer {
	mock := &MockBookServiceServer{ctrl: ctrl}
	mock.recorder = &MockBookServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookServiceServer) EXPECT() *MockBookServiceServerMockRecorder {
	return m.recorder
}

// AddBook mocks base method.
func (m *MockBookServiceServer) AddBook(arg0 context.Context, arg1 *proto.AddBookRequest) (*proto.AddBookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBook", arg0, arg1)
	ret0, _ := ret[0].(*proto.AddBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBook indicates an expected call of AddBook.
func (mr *MockBookServiceServerMockRecorder) AddBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBook", reflect.TypeOf((*MockBookServiceServer)(nil).AddBook), arg0, arg1)
}

// CheckAvailability mocks base method.
func (m *MockBookServiceServer) CheckAvailability(arg0 context.Context, arg1 *proto.CheckAvailabilityRequest) (*proto.CheckAvailabilityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAvailability", arg0, arg1)
	ret0, _ := ret[0].(*proto.CheckAvailabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAvailability indicates an expected call of CheckAvailability.
func (mr *MockBookServiceServerMockRecorder) CheckAvailability(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAvailability", reflect.TypeOf((*MockBookServiceServer)(nil).CheckAvailability), arg0, arg1)
}

// DeleteBook mocks base method.
func (m *MockBookServiceServer) DeleteBook(arg0 context.Context, arg1 *proto.DeleteBookRequest) (*proto.DeleteBookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookServiceServerMockRecorder) DeleteBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookServiceServer)(nil).DeleteBook), arg0, arg1)
}

// ListBooks mocks base method.
func (m *MockBookServiceServer) ListBooks(arg0 context.Context, arg1 *proto.ListBooksRequest) (*proto.ListBooksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", arg0, arg1)
	ret0, _ := ret[0].(*proto.ListBooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockBookServiceServerMockRecorder) ListBooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockBookServiceServer)(nil).ListBooks), arg0, arg1)
}

// SearchBooks mocks base method.
func (m *MockBookServiceServer) SearchBooks(arg0 context.Context, arg1 *proto.SearchBooksRequest) (*proto.SearchBooksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBooks", arg0, arg1)
	ret0, _ := ret[0].(*proto.SearchBooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBooks indicates an expected call of SearchBooks.
func (mr *MockBookServiceServerMockRecorder) SearchBooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBooks", reflect.TypeOf((*MockBookServiceServer)(nil).SearchBooks), arg0, arg1)
}

// UpdateBook mocks base method.
func (m *MockBookServiceServer) UpdateBook(arg0 context.Context, arg1 *proto.UpdateBookRequest) (*proto.UpdateBookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookServiceServerMockRecorder) UpdateBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookServiceServer)(nil).UpdateBook), arg0, arg1)
}

// UpdateBookStatus mocks base method.
func (m *MockBookServiceServer) UpdateBookStatus(arg0 context.Context, arg1 *proto.UpdateBookStatusRequest) (*proto.UpdateBookStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookStatus", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateBookStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBookStatus indicates an expected call of UpdateBookStatus.
func (mr *MockBookServiceServerMockRecorder) UpdateBookStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookStatus", reflect.TypeOf((*MockBookServiceServer)(nil).UpdateBookStatus), arg0, arg1)
}

// mustEmbedUnimplementedBookServiceServer mocks base method.
func (m *MockBookServiceServer) mustEmbedUnimplementedBookServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBookServiceServer")
}

// mustEmbedUnimplementedBookServiceServer indicates an expected call of mustEmbedUnimplementedBookServiceServer.
func (mr *MockBookServiceServerMockRecorder) mustEmbedUnimplementedBookServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBookServiceServer", reflect.TypeOf((*MockBookServiceServer)(nil).mustEmbedUnimplementedBookServiceServer))
}

// MockUnsafeBookServiceServer is a mock of UnsafeBookServiceServer interface.
type MockUnsafeBookServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBookServiceServerMockRecorder
}

// MockUnsafeBookServiceServerMockRecorder is the mock recorder for MockUnsafeBookServiceServer.
type MockUnsafeBookServiceServerMockRecorder struct {
	mock *MockUnsafeBookServiceServer
}

// NewMockUnsafeBookServiceServer creates a new mock instance.
func NewMockUnsafeBookServiceServer(ctrl *gomock.Controller) *MockUnsafeBookServiceServer {
	mock := &MockUnsafeBookServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBookServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBookServiceServer) EXPECT() *MockUnsafeBookServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBookServiceServer mocks base method.
func (m *MockUnsafeBookServiceServer) mustEmbedUnimplementedBookServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBookServiceServer")
}

// mustEmbedUnimplementedBookServiceServer indicates an expected call of mustEmbedUnimplementedBookServiceServer.
func (mr *MockUnsafeBookServiceServerMockRecorder) mustEmbedUnimplementedBookServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBookServiceServer", reflect.TypeOf((*MockUnsafeBookServiceServer)(nil).mustEmbedUnimplementedBookServiceServer))
}
