// Code generated by MockGen. DO NOT EDIT.
// Source: .//proto/borrow_grpc.pb.go

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/hossein-225/Library-Management/borrow-service/proto"
	grpc "google.golang.org/grpc"
)

// MockBorrowServiceClient is a mock of BorrowServiceClient interface.
type MockBorrowServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBorrowServiceClientMockRecorder
}

// MockBorrowServiceClientMockRecorder is the mock recorder for MockBorrowServiceClient.
type MockBorrowServiceClientMockRecorder struct {
	mock *MockBorrowServiceClient
}

// NewMockBorrowServiceClient creates a new mock instance.
func NewMockBorrowServiceClient(ctrl *gomock.Controller) *MockBorrowServiceClient {
	mock := &MockBorrowServiceClient{ctrl: ctrl}
	mock.recorder = &MockBorrowServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBorrowServiceClient) EXPECT() *MockBorrowServiceClientMockRecorder {
	return m.recorder
}

// BorrowBook mocks base method.
func (m *MockBorrowServiceClient) BorrowBook(ctx context.Context, in *proto.BorrowBookRequest, opts ...grpc.CallOption) (*proto.BorrowBookResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BorrowBook", varargs...)
	ret0, _ := ret[0].(*proto.BorrowBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BorrowBook indicates an expected call of BorrowBook.
func (mr *MockBorrowServiceClientMockRecorder) BorrowBook(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BorrowBook", reflect.TypeOf((*MockBorrowServiceClient)(nil).BorrowBook), varargs...)
}

// GetUserBorrows mocks base method.
func (m *MockBorrowServiceClient) GetUserBorrows(ctx context.Context, in *proto.GetUserBorrowsRequest, opts ...grpc.CallOption) (*proto.GetUserBorrowsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserBorrows", varargs...)
	ret0, _ := ret[0].(*proto.GetUserBorrowsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBorrows indicates an expected call of GetUserBorrows.
func (mr *MockBorrowServiceClientMockRecorder) GetUserBorrows(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBorrows", reflect.TypeOf((*MockBorrowServiceClient)(nil).GetUserBorrows), varargs...)
}

// ReturnBook mocks base method.
func (m *MockBorrowServiceClient) ReturnBook(ctx context.Context, in *proto.ReturnBookRequest, opts ...grpc.CallOption) (*proto.ReturnBookResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReturnBook", varargs...)
	ret0, _ := ret[0].(*proto.ReturnBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReturnBook indicates an expected call of ReturnBook.
func (mr *MockBorrowServiceClientMockRecorder) ReturnBook(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnBook", reflect.TypeOf((*MockBorrowServiceClient)(nil).ReturnBook), varargs...)
}

// MockBorrowServiceServer is a mock of BorrowServiceServer interface.
type MockBorrowServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBorrowServiceServerMockRecorder
}

// MockBorrowServiceServerMockRecorder is the mock recorder for MockBorrowServiceServer.
type MockBorrowServiceServerMockRecorder struct {
	mock *MockBorrowServiceServer
}

// NewMockBorrowServiceServer creates a new mock instance.
func NewMockBorrowServiceServer(ctrl *gomock.Controller) *MockBorrowServiceServer {
	mock := &MockBorrowServiceServer{ctrl: ctrl}
	mock.recorder = &MockBorrowServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBorrowServiceServer) EXPECT() *MockBorrowServiceServerMockRecorder {
	return m.recorder
}

// BorrowBook mocks base method.
func (m *MockBorrowServiceServer) BorrowBook(arg0 context.Context, arg1 *proto.BorrowBookRequest) (*proto.BorrowBookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BorrowBook", arg0, arg1)
	ret0, _ := ret[0].(*proto.BorrowBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BorrowBook indicates an expected call of BorrowBook.
func (mr *MockBorrowServiceServerMockRecorder) BorrowBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BorrowBook", reflect.TypeOf((*MockBorrowServiceServer)(nil).BorrowBook), arg0, arg1)
}

// GetUserBorrows mocks base method.
func (m *MockBorrowServiceServer) GetUserBorrows(arg0 context.Context, arg1 *proto.GetUserBorrowsRequest) (*proto.GetUserBorrowsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBorrows", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetUserBorrowsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBorrows indicates an expected call of GetUserBorrows.
func (mr *MockBorrowServiceServerMockRecorder) GetUserBorrows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBorrows", reflect.TypeOf((*MockBorrowServiceServer)(nil).GetUserBorrows), arg0, arg1)
}

// ReturnBook mocks base method.
func (m *MockBorrowServiceServer) ReturnBook(arg0 context.Context, arg1 *proto.ReturnBookRequest) (*proto.ReturnBookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnBook", arg0, arg1)
	ret0, _ := ret[0].(*proto.ReturnBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReturnBook indicates an expected call of ReturnBook.
func (mr *MockBorrowServiceServerMockRecorder) ReturnBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnBook", reflect.TypeOf((*MockBorrowServiceServer)(nil).ReturnBook), arg0, arg1)
}

// mustEmbedUnimplementedBorrowServiceServer mocks base method.
func (m *MockBorrowServiceServer) mustEmbedUnimplementedBorrowServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBorrowServiceServer")
}

// mustEmbedUnimplementedBorrowServiceServer indicates an expected call of mustEmbedUnimplementedBorrowServiceServer.
func (mr *MockBorrowServiceServerMockRecorder) mustEmbedUnimplementedBorrowServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBorrowServiceServer", reflect.TypeOf((*MockBorrowServiceServer)(nil).mustEmbedUnimplementedBorrowServiceServer))
}

// MockUnsafeBorrowServiceServer is a mock of UnsafeBorrowServiceServer interface.
type MockUnsafeBorrowServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBorrowServiceServerMockRecorder
}

// MockUnsafeBorrowServiceServerMockRecorder is the mock recorder for MockUnsafeBorrowServiceServer.
type MockUnsafeBorrowServiceServerMockRecorder struct {
	mock *MockUnsafeBorrowServiceServer
}

// NewMockUnsafeBorrowServiceServer creates a new mock instance.
func NewMockUnsafeBorrowServiceServer(ctrl *gomock.Controller) *MockUnsafeBorrowServiceServer {
	mock := &MockUnsafeBorrowServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBorrowServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBorrowServiceServer) EXPECT() *MockUnsafeBorrowServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBorrowServiceServer mocks base method.
func (m *MockUnsafeBorrowServiceServer) mustEmbedUnimplementedBorrowServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBorrowServiceServer")
}

// mustEmbedUnimplementedBorrowServiceServer indicates an expected call of mustEmbedUnimplementedBorrowServiceServer.
func (mr *MockUnsafeBorrowServiceServerMockRecorder) mustEmbedUnimplementedBorrowServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBorrowServiceServer", reflect.TypeOf((*MockUnsafeBorrowServiceServer)(nil).mustEmbedUnimplementedBorrowServiceServer))
}
